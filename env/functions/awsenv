# current aws credentials format is: export AWS_ACCESS_KEY_ID=VALUE && export AWS_SECRET_ACCESS_KEY=VALUE && export AWS_SESSION_TOKEN=VALUE

function usage() {
	printf "usage: awsenv [--profile <profile>] [--region <region>] [--shell]\n"
	echo "example: awsenv --profile default --region us-east-1"
	echo "example: awsenv -p default -r us-east-1"
	echo "example: awsenv -p default"
  echo "example: awsenv -s -p default"
	printf "example: awsenv -r us-east-1\n"
}

log() {
  echo $(date +"%Y-%m-%d %H:%M:%S") INFO $1
}

log "starting awsenv"

# loop through arguments
while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
	-p | --profile)
		profile="$2"
		shift 2
		;;
	-r | --region)
		region="$2"
		shift 2
		;;
	-s | --shell)
		shell="true"
		;;
	*)
		usage
		return 1
		;;
	esac
done

log "loop through arguments done"

# show usage in case profile or region are not set
if [[ -z $profile ]] && [[ -z $region ]]; then
	usage
	return 1
fi

log "show usage done"

# only update region if profile is not provided
if [[ -z $profile ]]; then
	profile=$AWS_PROFILE

	if [[ -z $profile ]]; then
		log "profile not set"
		printf "please specify profile parameter\n"
		usage
		return 1
	fi

	aws configure set region "$region" --profile "$profile"
	return $?
fi

log "only update region done"

# set region to current profile region if not set
if [[ -z $region ]]; then
	region=$(aws configure get region --profile "$profile" 2>/dev/null)

	if [[ -z $region ]]; then
		log "profile $profile does not exist"
		printf "please specify region parameter\n"
		usage
		return 1
	fi
else
	aws configure set region "$region" --profile "$profile"
fi

log "set region to current profile region if not set done"

# get aws credentials from clipboard
aws_credentials=$(pbpaste)

# verify clipboard for aws credentials
if [[ $aws_credentials == *"AWS"* ]]; then
  # parse aws credentials from clipboard
  aws_credentials=$(echo "$aws_credentials" | sed 's/export//g' | sed 's/&&/\n/g' | sed 's/ //g' | sed 's/=/ /g')

  # run aws config set to save credentials
  aws_configure_commands=""
  while read -r line; do
    # key to lower case
    KEY=$(echo "$line" | awk '{print $1}' | tr '[:upper:]' '[:lower:]')
    VALUE=$(echo "$line" | awk '{print $2}')

    aws configure set "$KEY" "$VALUE" --profile "$profile" --region "$region"
    aws_configure_commands+="aws configure set $KEY $VALUE --profile $profile --region $region; "
  done <<<"$aws_credentials"

  log "aws credentials found in clipboard, configuring aws profile with credentials"

  eval "$aws_configure_commands"

  log "aws profile $profile configured with credentials."
else
  log "aws credentials not found in clipboard, configuring aws profile without credentials"
fi

if [[ -n $shell ]]; then
  # persisting the profile
  sed -i '' "s/AWS_PROFILE=.*/AWS_PROFILE=$profile/g" "$OFFICE_PROFILE"

  log "aws default profile set to $profile."
fi

# setting the profile for the current shell
export AWS_PROFILE=$profile

log "aws default profile set to $profile."

# vim:ft=zsh
